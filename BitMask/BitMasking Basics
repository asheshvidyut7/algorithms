In dynamic programming with bit mask, suppose we have a set with n values and we have to do some
operation on the all the subsets, so we will have 1 << n, subsets, and each number from 0 to (2 ^ n) - 1,
will represent a subset in which the elements with 1 are values from array which are included, and
elements with '0' binary are excluded
So in dynamic programming with bit masks we find the solution to smaller masks and use the pre computed
value to find the solution for larger masks, (subsets)
whenever the constraint is small we can use this technique
some use full bit calculations
Set union
A | B

Set intersection
A & B

Set subtraction
A & ~B

Set negation
ALL_BITS ^ A

Set bit
A |= 1 << bit

Clear bit
A &= ~(1 << bit)

Test bit
(A & (1 << bit)) != 0

// testing whether a bit is 1 or 0 at the bit th position
// always we test if it is not equal to 0, if a bit is set then the LHS will be equal to power of 2
// not 1

Programs - CC_TSHIRTS, CC-SHOOTING, CF - 442 A